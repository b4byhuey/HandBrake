
name: Windows Build

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_mingw:
    name: CLI / LibHB
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Cargo-C Toolchain Cache
      id: windows-cargo-c-toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/cargo-capi
          ~/.cargo/bin/cargo-cbuild
          ~/.cargo/bin/cargo-cinstall
        key: windows-cargo-c-toolchain

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        sudo apt-get install -y automake autoconf build-essential libtool libtool-bin make nasm patch tar yasm zlib1g-dev ninja-build gzip pax libssl-dev
        sudo pip3 install meson
        rustup target add x86_64-pc-windows-gnu

    - name: Setup Toolchain
      run: |
        wget https://github.com/bradleysepos/mingw-w64-build/releases/download/10.0.0/mingw-w64-toolchain-10.0.0-msvcrt-linux-x86_64.tar.gz
        SHA=$(sha1sum mingw-w64-toolchain-10.0.0-msvcrt-linux-x86_64.tar.gz)
        EXPECTED="f7250d140a72bdfdda2d4cd01d84e9a3938132b1  mingw-w64-toolchain-10.0.0-msvcrt-linux-x86_64.tar.gz"
        echo "Computed SHA: $SHA"
        if [ "$SHA" == "$EXPECTED" ]; then
            echo "Toolchain Verified. Extracting ..."
            mkdir toolchains
            mv mingw-w64-toolchain-10.0.0-msvcrt-linux-x86_64.tar.gz toolchains
            cd toolchains
            tar xvf mingw-w64-toolchain-10.0.0-msvcrt-linux-x86_64.tar.gz
            cd mingw-w64-toolchain-10.0.0-msvcrt-linux-x86_64/mingw-w64-x86_64/
        else
            echo "Toolchain Verification FAILED. Exiting!"
            exit 2
        fi

    - name: Setup Cargo-C Toolchain
      if: steps.windows-cargo-c-toolchain.outputs.cache-hit != 'true'
      run: |
        cargo install cargo-c

    - name: Build CLI and LibHB
      run: |
        set -e
        echo "Setting PATH for the toolchain"
        export PATH="/home/runner/work/HandBrake/HandBrake/toolchains/mingw-w64-toolchain-10.0.0-msvcrt-linux-x86_64/mingw-w64-x86_64/bin:${PATH}"
        export PATH=/usr/bin:$PATH
        
        echo "Configuring the build"
        ./configure --cross=x86_64-w64-mingw32 --enable-qsv --enable-vce --enable-nvenc --enable-nvdec --enable-fdk-aac --launch-jobs=0 --launch > configure.log 2>&1 || { echo "Configuration failed"; cat configure.log; exit 1; }

        echo "Entering build directory"
        cd build || { echo "Failed to change directory to build"; exit 1; }
        
        echo "Starting the build process"
        make pkg.create.zip > build.log 2>&1 || { echo "Build process failed"; cat build.log; exit 1; }    

    - name: Upload Configure Log
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: configure-log
        path: configure.log

    - name: Upload Build Log
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: build/build.log

    - name: Upload HandBrakeCLI
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: HandBrakeCLI
        path: |
          ./build/HandBrakeCLI.exe
          ./build/NetflixSansMedium.ttf
